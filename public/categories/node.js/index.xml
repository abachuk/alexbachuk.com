<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.Js on Alex Bachuk</title>
    <link>/categories/node.js/</link>
    <description>Recent content in Node.Js on Alex Bachuk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>All rights reserved - 2017</copyright>
    <lastBuildDate>Sat, 17 Dec 2016 14:58:17 +0000</lastBuildDate>
    
	<atom:link href="/categories/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Uploading files with React.js and Node.js</title>
      <link>/2016/12/17/uploading-files-with-react-js-and-node-js/</link>
      <pubDate>Sat, 17 Dec 2016 14:58:17 +0000</pubDate>
      
      <guid>/2016/12/17/uploading-files-with-react-js-and-node-js/</guid>
      <description>Uploading files is one of the most common tasks performed by web developers. It’s a pretty simple operation when using PHP or other server side frameworks. However, it is not so straightforward when using Node.js, unless you understand how to user Buffer API for reading streams of binary files (i.e. uploading file content as binary code). Luckily for us, the Node.js community came up with a few solutions.
Project set up We are using React.</description>
    </item>
    
    <item>
      <title>Adaptive express.js and angular.js application</title>
      <link>/2015/11/24/adaptive-express-js-and-angular-js-application/</link>
      <pubDate>Tue, 24 Nov 2015 03:13:34 +0000</pubDate>
      
      <guid>/2015/11/24/adaptive-express-js-and-angular-js-application/</guid>
      <description>Mobile web is growing really fast and for some businesses it is a significant (if not majority) amount of traffic. The experience on mobile could be slightly different than desktop or it could be completely different depending on the project or the app. For example, marketing or news website might have similar experience, since its only goal is to deliver the content in accessible way. But, for other websites, like e-commerce mobile experience might be have totally different meaning.</description>
    </item>
    
    <item>
      <title>Upload files with meteor.js, aws and froala wysiwyg package</title>
      <link>/2015/10/06/upload-files-with-meteor-js-aws-and-froala-wysiwyg-package/</link>
      <pubDate>Tue, 06 Oct 2015 19:26:02 +0000</pubDate>
      
      <guid>/2015/10/06/upload-files-with-meteor-js-aws-and-froala-wysiwyg-package/</guid>
      <description>It’s not very easy to upload files directly to Meteor, although there is a way to “emulate” file system and upload files directly to your server, why not use Amazon S3, which very cheap and fast to host static files. I find that having the separation gives some peace of mind, you can deploy your app, change servers, even delete the app or re-build it from the ground up, without affecting your or users&amp;rsquo; static files such as images, videos, documents, etc.</description>
    </item>
    
  </channel>
</rss>